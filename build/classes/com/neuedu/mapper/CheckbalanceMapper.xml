<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.neuedu.mapper.CheckbalanceMapper">
  <resultMap id="BaseResultMap" type="com.neuedu.model.Checkbalance">
    <id column="CHID" jdbcType="INTEGER" property="chid" />
    <result column="BUYID" jdbcType="INTEGER" property="buyid" />
    <result column="BID" jdbcType="INTEGER" property="bid" />
    <result column="REPAIRID" jdbcType="INTEGER" property="repairid" />
    <result column="SID" jdbcType="INTEGER" property="sid" />
    <result column="TID" jdbcType="INTEGER" property="tid" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    CHID, BUYID, BID, REPAIRID, SID, TID
  </sql>
  <select id="selectByExample" parameterType="com.neuedu.model.CheckbalanceExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from checkbalance
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from checkbalance
    where CHID = #{chid,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from checkbalance
    where CHID = #{chid,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.neuedu.model.CheckbalanceExample">
    delete from checkbalance
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.neuedu.model.Checkbalance">
    insert into checkbalance (CHID, BUYID, BID, 
      REPAIRID, SID, TID)
    values (#{chid,jdbcType=INTEGER}, #{buyid,jdbcType=INTEGER}, #{bid,jdbcType=INTEGER}, 
      #{repairid,jdbcType=INTEGER}, #{sid,jdbcType=INTEGER}, #{tid,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.neuedu.model.Checkbalance">
    insert into checkbalance
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="chid != null">
        CHID,
      </if>
      <if test="buyid != null">
        BUYID,
      </if>
      <if test="bid != null">
        BID,
      </if>
      <if test="repairid != null">
        REPAIRID,
      </if>
      <if test="sid != null">
        SID,
      </if>
      <if test="tid != null">
        TID,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="chid != null">
        #{chid,jdbcType=INTEGER},
      </if>
      <if test="buyid != null">
        #{buyid,jdbcType=INTEGER},
      </if>
      <if test="bid != null">
        #{bid,jdbcType=INTEGER},
      </if>
      <if test="repairid != null">
        #{repairid,jdbcType=INTEGER},
      </if>
      <if test="sid != null">
        #{sid,jdbcType=INTEGER},
      </if>
      <if test="tid != null">
        #{tid,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.neuedu.model.CheckbalanceExample" resultType="java.lang.Long">
    select count(*) from checkbalance
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update checkbalance
    <set>
      <if test="record.chid != null">
        CHID = #{record.chid,jdbcType=INTEGER},
      </if>
      <if test="record.buyid != null">
        BUYID = #{record.buyid,jdbcType=INTEGER},
      </if>
      <if test="record.bid != null">
        BID = #{record.bid,jdbcType=INTEGER},
      </if>
      <if test="record.repairid != null">
        REPAIRID = #{record.repairid,jdbcType=INTEGER},
      </if>
      <if test="record.sid != null">
        SID = #{record.sid,jdbcType=INTEGER},
      </if>
      <if test="record.tid != null">
        TID = #{record.tid,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update checkbalance
    set CHID = #{record.chid,jdbcType=INTEGER},
      BUYID = #{record.buyid,jdbcType=INTEGER},
      BID = #{record.bid,jdbcType=INTEGER},
      REPAIRID = #{record.repairid,jdbcType=INTEGER},
      SID = #{record.sid,jdbcType=INTEGER},
      TID = #{record.tid,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.neuedu.model.Checkbalance">
    update checkbalance
    <set>
      <if test="buyid != null">
        BUYID = #{buyid,jdbcType=INTEGER},
      </if>
      <if test="bid != null">
        BID = #{bid,jdbcType=INTEGER},
      </if>
      <if test="repairid != null">
        REPAIRID = #{repairid,jdbcType=INTEGER},
      </if>
      <if test="sid != null">
        SID = #{sid,jdbcType=INTEGER},
      </if>
      <if test="tid != null">
        TID = #{tid,jdbcType=INTEGER},
      </if>
    </set>
    where CHID = #{chid,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.neuedu.model.Checkbalance">
    update checkbalance
    set BUYID = #{buyid,jdbcType=INTEGER},
      BID = #{bid,jdbcType=INTEGER},
      REPAIRID = #{repairid,jdbcType=INTEGER},
      SID = #{sid,jdbcType=INTEGER},
      TID = #{tid,jdbcType=INTEGER}
    where CHID = #{chid,jdbcType=INTEGER}
  </update>
</mapper>